# Steps for restoring project cache

steps:
  - bash: 'mkdir -p $(Build.StagingDirectory)'
    condition: and(eq(variables['Build.Reason'], 'PullRequest'), and(succeeded(), ne(variables['Build.SourceBranch'], variables['System.PullRequest.TargetBranch'])))
    displayName: '[Cache][Publish] Create cache directory'

  - task: Bash@3
    condition: and(eq(variables['Build.Reason'], 'PullRequest'), and(succeeded(), ne(variables['Build.SourceBranch'], variables['System.PullRequest.TargetBranch'])))
    displayName: '[Cache][Restore] Restoring build cache using REST API'
    continueOnError: true
    inputs:
      targetType: 'inline' # Optional. Options: filePath, inline
      script: |
        # If org name is reasonml then REST_BASE will be: https://dev.azure.com/reasonml/
        REST_BASE="${SYSTEM_TEAMFOUNDATIONCOLLECTIONURI}"
        PROJ="$SYSTEM_TEAMPROJECT"
        ART_NAME="cache-${AGENT_OS}-install"
        fetchLatestBuild() {
          PREFIX="branchName=refs%2Fheads%2F"
          BRANCH=${PREFIX}${SYSTEM_PULLREQUEST_TARGETBRANCH}
          FILTER='deletedFilter=excludeDeleted&statusFilter=completed&resultFilter=succeeded'
          LATEST='queryOrder=finishTimeDescending&$top=1'
          REST_BUILDS="$REST_BASE/$PROJ/_apis/build/builds?${FILTER}&${BRANCH}&${LATEST}&api-version=4.1"
          echo "Rest call for builds: $REST_BUILDS"
          REST_BUILDS_RESP=$(curl "$REST_BUILDS")
          if [[ $REST_BUILDS_RESP =~ (\"web\":\{\"href\":\")([^\"]*) ]]; then LATEST_BUILD_PAGE="${BASH_REMATCH[2]}"; else LATEST_BUILD_PAGE=""; fi
          if [[ $REST_BUILDS_RESP =~ (\"badge\":\{\"href\":\")([^\"]*) ]]; then LATEST_BUILD_BADGE="${BASH_REMATCH[2]}"; else LATEST_BUILD_BADGE=""; fi
          if [[ $REST_BUILDS_RESP =~ (\"id\":)([^,]*) ]]; then LATEST_BUILD_ID="${BASH_REMATCH[2]}"; else LATEST_BUILD_ID=""; fi
        }
        fetchLatestBuild
        fetchArtifactURL() {
          REST_ART="$REST_BASE/$PROJ/_apis/build/builds/$LATEST_BUILD_ID/artifacts?artifactName=$ART_NAME&api-version=4.1"
          echo "Rest call for artifacts: $REST_ART"
          if [[ $(curl $REST_ART) =~ (downloadUrl\":\")([^\"]*) ]]; then LATEST_ART_URL="${BASH_REMATCH[2]}"; else LATEST_ART_URL=""; fi
        }
        downloadArtifactAndContinue() {
          if [ -z "$LATEST_ART_URL" ]
          then
            echo "No latest artifact for merge-target branch found at URL $REST_ART"
          else
            curl "$LATEST_ART_URL" > "${BUILD_STAGINGDIRECTORY}/$ART_NAME.zip"
            cd $BUILD_STAGINGDIRECTORY
            unzip "$ART_NAME.zip"
            echo "Using Dependency cache for buildID: $LATEST_BUILD_ID"
            echo "Build log for build that produced the cache: $LATEST_BUILD_PAGE"
            echo "Build badge for build that produced the cache: $LATEST_BUILD_BADGE"
            echo "Build artifact from build that produced the cache: $LATEST_ART_URL"
            echo "Restoring build cache into:"
            echo $ESY__CACHE_INSTALL_PATH
            mkdir -p $ESY__CACHE_INSTALL_PATH
            if [ "$AGENT_OS" == "Windows_NT" ]; then
              # tar on windows sees staging directory is D:/ as remote host.
              # need to convert it to unix ironically
              STAGE_DIR="$( cygpath --unix ${BUILD_STAGINGDIRECTORY} )"
            else
              STAGE_DIR="${BUILD_STAGINGDIRECTORY}"
            fi
            cd $ESY__CACHE_INSTALL_PATH && tar -xf "${STAGE_DIR}/cache-${AGENT_OS}-install/esy-cache.tar" -C .
          fi
        }
        fetchArtifactURL
        downloadArtifactAndContinue
      

  - bash: 'rm -rf *'
    continueOnError: true
    workingDirectory: '$(Build.StagingDirectory)'
    condition: and(eq(variables['Build.Reason'], 'PullRequest'), and(succeeded(), ne(variables['Build.SourceBranch'], variables['System.PullRequest.TargetBranch'])))
    displayName: '[Cache][Restore] Clean up'
